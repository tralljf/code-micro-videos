<?php

namespace Tests\Feature\Http\Controllers\Api;

use App\Http\Controllers\Api\BasicCrudController;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Http\Request;
use Illuminate\Validation\ValidationException;
use Tests\Stubs\Controllers\CategoryControllerStub;
use Tests\Stubs\Models\CategoryStub;
use Tests\TestCase;

 class BasicCrudControllerTest extends TestCase
{
    private $controller;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        CategoryStub::dropTable();
        CategoryStub::createTable();
        $this->controller = new CategoryControllerStub();
    }

    protected function tearDown(): void
    {
        CategoryStub::dropTable();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testIndex()
    {
        /** @var CategoryStub $category **/
        $category = CategoryStub::create(['name' => 'Teste', 'description' => 'test_description']);

        $this->assertEquals(
            [$category->toArray()],
            CategoryStub::all()->toArray()
        );
    }

    public function testInvalidationdataInStore()
    {
        $this->expectException(ValidationException::class);

        $request = \Mockery::mock(Request::class);
        $request->shouldReceive('all')->once()->andReturn(['name' => '']);
        $this->controller->store($request);
    }

    public function testStore()
    {
        $request = \Mockery::mock(Request::class);
        $request->shouldReceive('all')
                ->once()
                ->andReturn(['name' => 'Teste Name', 'description' => 'Teste Description']);
        $obj = $this->controller->store($request);
        $this->assertEquals(
            CategoryStub::find(1)->toArray(),
            $obj->toArray()
        );
    }

    public function testIfFindOrFailFetchModel()
    {
        /** @var CategoryStub $category **/
        $category = CategoryStub::create(['name' => 'Teste', 'description' => 'test_description']);

        $reflectionClass = new \ReflectionClass(BasicCrudController::class);
        $reflectionMethod = $reflectionClass->getMethod('findOrFail');
        $reflectionMethod->setAccessible(true);

        $result = $reflectionMethod->invokeArgs($this->controller, [$category->id]);
        $this->assertInstanceOf(CategoryStub::class, $result);
    }


     public function testIfFindOrFailThrowExceptionIdInvalid()
     {
         $this->expectException(ModelNotFoundException::class);
         $reflectionClass = new \ReflectionClass(BasicCrudController::class);
         $reflectionMethod = $reflectionClass->getMethod('findOrFail');
         $reflectionMethod->setAccessible(true);

         $result = $reflectionMethod->invokeArgs($this->controller, [0]);
     }

     public function testShow()
     {
        /** @var CategoryStub $category * */
        $category = CategoryStub::create(['name' => 'Teste', 'description' => 'test_description']);


        $this->assertEquals($category->toArray(), CategoryStub::find(1)->toArray());
     }

     public function testUpdate()
     {
         /** @var CategoryStub $category * */
         $category = CategoryStub::create(['name' => 'Teste', 'description' => 'test_description']);

         $request = \Mockery::mock(Request::class);
         $request->shouldReceive('all')
             ->once()
             ->andReturn(['name' => 'Teste Name', 'description' => 'Teste Description']);

         $result = $this->controller->update($request, $category->id);
         $this->assertEquals($result->toArray(), CategoryStub::find(1)->toArray());
     }

     public function testDestroy()
     {
         /** @var CategoryStub $category * */
         $category = CategoryStub::create(['name' => 'Teste', 'description' => 'test_description']);
         $response = $this->controller->destroy($category->id);
         $this
             ->createTestResponse($response)
             ->assertStatus(204);

         $this->assertCount(0, CategoryStub::all());
     }
}
